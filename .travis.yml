language: cpp
dist: focal

cache: # see https://docs.travis-ci.com/user/caching/
  - directories:
    - $HOME/.cache

matrix:
  include:
    - os: linux
      addons: &gcc9
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
            - libfmt-dev
            - libspdlog-dev
            - lcov
      env: COMPILER=gcc GCC=9 BLAS=OpenBLAS BUILD_TYPE='Debug'
    - os: linux
      addons: *gcc9
      env: COMPILER=gcc GCC=9 BLAS=OpenBLAS BUILD_TYPE='Release'
    - os: linux
      addons: *gcc9
      env: COMPILER=gcc GCC=9 BLAS=OpenBLAS BUILD_TYPE='Coverage'
    - os: linux
      addons: &gcc10
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
            - libfmt-dev
            - libspdlog-dev
            - lcov
      env: COMPILER=gcc GCC=10 BLAS=OpenBLAS BUILD_TYPE='Debug'
    - os: linux
      addons: *gcc10
      env: COMPILER=gcc GCC=10 BLAS=OpenBLAS BUILD_TYPE='Release'
    - os: linux
      addons: &clang10
        apt:
          sources: ['llvm-toolchain-bionic-10', 'ubuntu-toolchain-r-test']
          packages:
            - clang-10
            - libstdc++-10-dev
            - libfmt-dev
            - libspdlog-dev
            - lcov
      env: COMPILER=clang CLANG=10 BLAS=OpenBLAS BUILD_TYPE='Debug'
    - os: linux
      addons: *clang10
      env: COMPILER=clang CLANG=10 BLAS=OpenBLAS BUILD_TYPE='Release'
    - os: osx
      osx_image: xcode12
      addons:
        homebrew:
          packages:
            - fmt
            - spdlog
            - lcov
          update: true
      env: COMPILER=clang CLANG=10 BLAS=OpenBLAS BUILD_TYPE='Release'

env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"

before_install:
  - |
    # Configure build variables
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      if [[ "$COMPILER" == "gcc" ]]; then
        export CXX=g++-$GCC CC=gcc-$GCC;
      fi
      if [[ "$COMPILER" == "clang" ]]; then
        export CXX=clang++-$CLANG CC=clang-$CLANG;
      fi
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export CXX=clang++ CC=clang;
    fi
    # export LDFLAGS="$LDFLAGS -lrt -pthread -lresolv"

install:
  - mkdir -p $HOME/.cache
  - touch $HOME/.cache/mydependency.so
  # Define the version of miniconda to download
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      MINCONDA_OS=$MINCONDA_LINUX;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      MINCONDA_OS=$MINCONDA_OSX;
    fi
  - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
  - export CONDA_PREFIX=$HOME/miniconda
  - bash miniconda.sh -b -p $CONDA_PREFIX
  - export PATH="$CONDA_PREFIX/bin:$PATH"
  - export LD_LIBRARY_PATH="$CONDA_PREFIX/lib"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  # - conda install gtest cmake -c conda-forge
  # Install xtensor and BLAS
  - if [[ "$BLAS" == "OpenBLAS" ]]; then
      conda install openblas -c conda-forge;
    elif [[ "$BLAS" == "mkl" ]]; then
      conda install mkl -c conda-forge;
    fi
  - conda install xtensor-fftw -c conda-forge
  - conda install xtensor-blas -c conda-forge
  - conda install xtensor -c conda-forge
  # - conda install xtensor-blas=0.11.1 -c conda-forge
  # - conda install xtensor=0.16.4 -c conda-forge
  - conda install lapack -c conda-forge
  - conda install libboost -c conda-forge
  - conda install catch2 -c conda-forge
  - conda install -c conda-forge benchmark

script:
  - |
    if [[ "$BUILD_TYPE" == "Coverage" ]]; then
      mkdir build && cd build;
      cmake -DENABLE_COVERAGE=1 -DCMAKE_PREFIX_PATH=$CONDA_PREFIX -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib ..;
      make -j2
      ctest -VV --output-on-failure
    else
      mkdir build && cd build;
      cmake -DBUILD_TESTS=ON -DCMAKE_PREFIX_PATH=$CONDA_PREFIX -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib ..;
      make -j2
      ctest -V -j 2
    fi

after_success:
  - |
    if [[ "$BUILD_TYPE" == "Coverage" ]]; then
      lcov --directory . --capture --output-file coverage.info # capture coverage info
      lcov --remove coverage.info '/usr/*' $CONDA_PREFIX'/*' --output-file coverage.info # filter out system
      lcov --list coverage.info #debug info
      # Uploading report to CodeCov
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    fi

notifications:
  email: false
  slack:
    rooms:
      - loksu:jErzuILLSNn9qGYkkILvBwje#ellcpp
